pipeline {
    agent any
    tools {nodejs "node"}

       environment {
        DEPLOY = 'false'
    }
     parameters { choice(name: 'DEV_ENV', choices: ['local', 'int'], description: '') 
     }
    stages {
        stage('Check Deployment') {
            steps {

                echo 'Logging into ${$DEV_ENV}'
                withCredentials([usernamePassword(credentialsId: 'apim_dev', usernameVariable: 'DEV_USERNAME', passwordVariable: 'DEV_PASSWORD')]) {
                    sh 'apictl login $DEV_ENV -u $DEV_USERNAME -p $DEV_PASSWORD -k'                        
                }
                script{
                def CHANGES = sh(script: "apictl vcs status -e $DEV_ENV", returnStdout: true).trim()
            
                if (CHANGES != 'Everything is up-to-date' ){
                        DEPLOY = 'true'
                }
                echo "DEPLOY---> ${DEPLOY}"
                echo "CHANGES---> ${CHANGES}"
                }

                script{
                def APIS = sh(script: "apictl vcs status -e local | grep apis |awk -F: \'{print \$3}\' | sed 's/ //g' | cut -d'.' -f1 ", returnStdout: true).trim()
                def m =  APIS.replace("(apis/", "").replace(")", " ")
                echo "APIS---> ${m}"
                def arr = m.split(" ")
                    for (i in arr) {
                        def API_VER = sh(script: " echo ${i} | tail -c 3", returnStdout: true).trim()
                    echo "DEV_ENV---> $DEV_ENV"
                    echo "API_VER---> $API_VER"
                        build job:"${i}", parameters: [
                              string(name: 'DEV_ENV', value: '$DEV_ENV'),
                              string(name: 'API_VER', value: '$API_VER')
                        ]
                    println "now got ${i}"
                
                        }
                }
            }
        }
    }
    post {
    
        cleanup {
            sh 'apictl logout $DEV_ENV -k'
            deleteDir()
            dir("${workspace}@tmp") {
                deleteDir()
            }
            dir("${workspace}@script") {
                deleteDir()
            }
        }
        
    }
}
