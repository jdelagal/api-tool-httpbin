pipeline {
    agent any
    tools {nodejs "node"}
    environment {
        CI = 'true'
        API_VERSION = 'v2'
        API_NAME = 'api-tool-httpbin'
        API_DIR = './apis/'
        DEV_ENV = 'local'
        TEST_SCRIPT_FILE = 'httpbin.postman_collection.json'
        SB_TOKEN_URL = 'https://localhost:8244/token'        
    }
    stages {
        stage('mock-server') {
            steps {
                sh 'docker run --init --rm -it -d --name $API_NAME -p 4010:4010 -v $(pwd):/tmp -P stoplight/prism:4 mock -h 0.0.0.0 "/tmp/swagger.yaml"'
            }
        }
            stage('Despliegue') {
            environment{
                RETRY = '80'
            }
            steps {
                echo "Register to ${DEV_ENV}-lv"
                sh './scripts/config.sh'
                echo 'Logging into ${$DEV_ENV}-lv'
                withCredentials([usernamePassword(credentialsId: 'apim_dev', usernameVariable: 'DEV_USERNAME', passwordVariable: 'DEV_PASSWORD')]) {
                    sh 'apictl login $DEV_ENV-lv -u $DEV_USERNAME -p $DEV_PASSWORD -k'                        
                }
                echo "Import to ${DEV_ENV}-lv"
                sh 'apictl import-api -f $API_DIR/$API_NAME-$API_VERSION -e $DEV_ENV-lv -k --preserve-provider --update --verbose'
                withCredentials([usernamePassword(credentialsId: 'apim_dev', usernameVariable: 'DEV_USERNAME', passwordVariable: 'DEV_PASSWORD')]) {
                    sh 'apictl login $DEV_ENV-sb -u $DEV_USERNAME -p $DEV_PASSWORD -k'                        
                }
            }
        }
        stage('Ejecucion de Tests contra Sandbox') {
            environment {
               TOKEN = sh(script: 'apictl get-keys -n $API_NAME -v $API_VERSION -e $DEV_ENV-sb -k -t $SB_TOKEN_URL', , returnStdout: true).trim()
           }
            steps {
                echo 'Token are $TOKEN'
                echo 'Running tests in $DEV_ENV'
                sh 'newman run ./test/$TEST_SCRIPT_FILE -e ./test/$DEV_ENV.postman_environment.json --global-var access_token=$TOKEN --reporters cli,junit --reporter-junit-export "postman.xml" --insecure --bail' 
            }
        }
    }
    post {
        always {
            junit '*.xml'
        }
        cleanup {
             sh 'apictl logout $DEV_ENV-lv -k'
             sh 'apictl logout $DEV_ENV-sb -k'
            deleteDir()
            dir("${workspace}@tmp") {
                deleteDir()
            }
            dir("${workspace}@script") {
                deleteDir()
            }
        }
        
    }
}
